name: Test Backup Functionality on pg16

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  test-backup:
    name: Test PostgreSQL Backup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create backup directory
        run: mkdir -p ./backup-output

      - name: Prepare build context
        run: |
          mkdir -p build/16
          cp template/* build/16/
          sed "s/%VERSION%/16/g" template/Dockerfile > build/16/Dockerfile

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: build/16
          push: false
          tags: postgresql-backup:test-16
          load: true

      - name: Start PostgreSQL container
        run: |
          docker run -d \
            --name postgres-test \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=testdb \
            postgres:16-alpine

      - name: Wait for PostgreSQL to start
        run: |
          echo "Waiting for PostgreSQL to start..."
          timeout 30s bash -c 'until docker exec postgres-test pg_isready -U postgres; do sleep 1; done'
          echo "PostgreSQL is ready!"

      - name: Run backup
        run: |
          docker run --rm \
            --link postgres-test:db \
            -e DB_USE_ENV=true
            -v ${{ github.workspace }}/backup-output:/data/backups \
            --entrypoint "/backup/run.sh" \
            postgresql-backup:test-16

      - name: Check backup was created
        run: |
          echo "Checking for backup files..."
          ls -la ${{ github.workspace }}/backup-output

          # Count backup files
          BACKUP_COUNT=$(find ${{ github.workspace }}/backup-output -type f | wc -l)

          if [ "$BACKUP_COUNT" -eq 0 ]; then
            echo "Error: No backup files were created!"
            exit 1
          else
            echo "Success: Found $BACKUP_COUNT backup file(s)"
          fi

          # Verify backup file format
          BACKUP_FILE=$(find ${{ github.workspace }}/backup-output -type f | head -n 1)
          echo "Backup file: $BACKUP_FILE"

          # Check if the backup file is a valid PostgreSQL dump
          if file "$BACKUP_FILE" | grep -q "PostgreSQL"; then
            echo "Success: Backup file is a valid PostgreSQL dump"
          else
            echo "Warning: Backup file format could not be verified"
            file "$BACKUP_FILE"
          fi
